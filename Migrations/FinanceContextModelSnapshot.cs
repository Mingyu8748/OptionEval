// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OptionDatabase;

#nullable disable

namespace OptionEval.Migrations
{
    [DbContext(typeof(FinanceContext))]
    partial class FinanceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OptionDatabase.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("OptionDatabase.FinancialInstrument", b =>
                {
                    b.Property<int>("FinancialInstrumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FinancialInstrumentID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TradingMarketId")
                        .HasColumnType("integer");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.HasKey("FinancialInstrumentID");

                    b.HasIndex("TradingMarketId");

                    b.ToTable("FinancialInstrument");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OptionDatabase.Option_Trade_Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Delta")
                        .HasColumnType("double precision");

                    b.Property<double>("Gamma")
                        .HasColumnType("double precision");

                    b.Property<double>("Rho")
                        .HasColumnType("double precision");

                    b.Property<double>("Theta")
                        .HasColumnType("double precision");

                    b.Property<double>("Unrealized_Pnl")
                        .HasColumnType("double precision");

                    b.Property<double>("Vega")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("OptionTradeEvaluation");
                });

            modelBuilder.Entity("OptionDatabase.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaluationId")
                        .HasColumnType("integer");

                    b.Property<int>("FinancialInstrumentId")
                        .HasColumnType("integer");

                    b.Property<double>("Trade_Price")
                        .HasColumnType("double precision");

                    b.Property<double>("quantity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("FinancialInstrumentId");

                    b.ToTable("Trade");
                });

            modelBuilder.Entity("OptionDatabase.TradingMarket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExchangeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("OptionDatabase.Option", b =>
                {
                    b.HasBaseType("OptionDatabase.FinancialInstrument");

                    b.Property<double>("expireIn")
                        .HasColumnType("double precision");

                    b.Property<int>("underlyingId")
                        .HasColumnType("integer");

                    b.Property<double>("volatility")
                        .HasColumnType("double precision");

                    b.HasIndex("underlyingId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("OptionDatabase.Underlying", b =>
                {
                    b.HasBaseType("OptionDatabase.FinancialInstrument");

                    b.ToTable("Underlying");
                });

            modelBuilder.Entity("OptionDatabase.Asian", b =>
                {
                    b.HasBaseType("OptionDatabase.Option");

                    b.Property<bool>("Is_Call")
                        .HasColumnType("boolean");

                    b.Property<double>("Strike")
                        .HasColumnType("double precision");

                    b.ToTable("Asian");
                });

            modelBuilder.Entity("OptionDatabase.Barrier", b =>
                {
                    b.HasBaseType("OptionDatabase.Option");

                    b.Property<double>("Barrier_Level")
                        .HasColumnType("double precision");

                    b.Property<bool>("Is_Call")
                        .HasColumnType("boolean");

                    b.Property<string>("Knock_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Strike")
                        .HasColumnType("double precision");

                    b.ToTable("Barrier");
                });

            modelBuilder.Entity("OptionDatabase.Digital", b =>
                {
                    b.HasBaseType("OptionDatabase.Option");

                    b.Property<bool>("Is_Call")
                        .HasColumnType("boolean");

                    b.Property<double>("Payout")
                        .HasColumnType("double precision");

                    b.Property<double>("Strike")
                        .HasColumnType("double precision");

                    b.ToTable("Digital");
                });

            modelBuilder.Entity("OptionDatabase.European", b =>
                {
                    b.HasBaseType("OptionDatabase.Option");

                    b.Property<bool>("Is_Call")
                        .HasColumnType("boolean");

                    b.Property<double>("Strike")
                        .HasColumnType("double precision");

                    b.ToTable("European");
                });

            modelBuilder.Entity("OptionDatabase.Lookback", b =>
                {
                    b.HasBaseType("OptionDatabase.Option");

                    b.Property<bool>("Is_Call")
                        .HasColumnType("boolean");

                    b.Property<double>("Strike")
                        .HasColumnType("double precision");

                    b.ToTable("Lookback");
                });

            modelBuilder.Entity("OptionDatabase.Range", b =>
                {
                    b.HasBaseType("OptionDatabase.Option");

                    b.ToTable("Range");
                });

            modelBuilder.Entity("OptionDatabase.FinancialInstrument", b =>
                {
                    b.HasOne("OptionDatabase.TradingMarket", "market")
                        .WithMany()
                        .HasForeignKey("TradingMarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("market");
                });

            modelBuilder.Entity("OptionDatabase.Trade", b =>
                {
                    b.HasOne("OptionDatabase.Option_Trade_Evaluation", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptionDatabase.FinancialInstrument", "financialInstrument")
                        .WithMany()
                        .HasForeignKey("FinancialInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("financialInstrument");
                });

            modelBuilder.Entity("OptionDatabase.TradingMarket", b =>
                {
                    b.HasOne("OptionDatabase.Exchange", "Exchange")
                        .WithMany("Markets")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("OptionDatabase.Option", b =>
                {
                    b.HasOne("OptionDatabase.FinancialInstrument", null)
                        .WithOne()
                        .HasForeignKey("OptionDatabase.Option", "FinancialInstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptionDatabase.Underlying", "underlying")
                        .WithMany()
                        .HasForeignKey("underlyingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("underlying");
                });

            modelBuilder.Entity("OptionDatabase.Underlying", b =>
                {
                    b.HasOne("OptionDatabase.FinancialInstrument", null)
                        .WithOne()
                        .HasForeignKey("OptionDatabase.Underlying", "FinancialInstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptionDatabase.Asian", b =>
                {
                    b.HasOne("OptionDatabase.Option", null)
                        .WithOne()
                        .HasForeignKey("OptionDatabase.Asian", "FinancialInstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptionDatabase.Barrier", b =>
                {
                    b.HasOne("OptionDatabase.Option", null)
                        .WithOne()
                        .HasForeignKey("OptionDatabase.Barrier", "FinancialInstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptionDatabase.Digital", b =>
                {
                    b.HasOne("OptionDatabase.Option", null)
                        .WithOne()
                        .HasForeignKey("OptionDatabase.Digital", "FinancialInstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptionDatabase.European", b =>
                {
                    b.HasOne("OptionDatabase.Option", null)
                        .WithOne()
                        .HasForeignKey("OptionDatabase.European", "FinancialInstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptionDatabase.Lookback", b =>
                {
                    b.HasOne("OptionDatabase.Option", null)
                        .WithOne()
                        .HasForeignKey("OptionDatabase.Lookback", "FinancialInstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptionDatabase.Range", b =>
                {
                    b.HasOne("OptionDatabase.Option", null)
                        .WithOne()
                        .HasForeignKey("OptionDatabase.Range", "FinancialInstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptionDatabase.Exchange", b =>
                {
                    b.Navigation("Markets");
                });
#pragma warning restore 612, 618
        }
    }
}
